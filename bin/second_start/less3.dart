void main(){
  // var list = [1, 2, 3];
  // List<int> listint = [1, 2, 3]; //с указанием типа
  //
  // list[1] = 5;        // установка 2-го элемента
  // int d = list[2];    // получем 3-й элемент
  // print(d);           // 6


 /* var list1 = List.generate(4, (int index) => index + 1, growable: false); // фиксированный список [1, 2, 3, 4] growable-отвечает за фиксированность списка

  list1[0] = 3;
  list1[1] = 7;
  list1[2] = 11;
  list1[3] = 15;
  //list1.add(1); // нельзя добавить новый элемент

  for (var n in list1){
    print(n);
  }*/



var list1 = List.filled(4, 2); // фиксированный список [2, 2, 2, 2]
list1[0] = 3;
list1[1] = 7;
list1[2] = 11;
list1[3] = 15;
 // list1.add(1); // нельзя добавить новый элемент
 for (var n in list1){
   print(n);
 }

}

/*Основные свойства списков:

first: возвращает первый элемент

last: возвращает последний элемент

length: возвращает длину списка

reversed: возвращает список, в котором все элементы расположены в противоположном порядке

isEmpty: возвращает true, если список пуст

Основные методы списков:

add(E value): добавляет элемент в конец списка

addAll(Iterable<E> iterable): добавляет в конец списка другой список

clear(): удаляет все элементы из списка

indexOf(E element): возвращает первый индекс элемента

insert(int index, E element): вставляет элемент на определенную позицию

remove(Object value): удаляет объект из списка (удаляется только первое вхождение элемена в список)

removeAt(int index): удаляет элементы по индексу

removeLast(): удаляет последний элемент списка

forEach(void f(E element)): производит над элементами списка некоторое действие, которое задается функцией-параметром, аналоги цикла for..in

sort(): сортирует список

sublist(int start, [ int end ]): возвращает часть списка от индекса start до индекса end

contains(Object element): возвращает true, если элемент содержится в списке

join([String separator = "" ]): объединяет все элементы списка в строку. Можно указать необязательный параметр separator, который будет раздлять элементы в строке

skip(int count): возвращает коллекцию, в которой отсутствуют первые count элементов

take(int count): возвращает коллекцию, которая содержит первые count элементов

where(bool test(E element)): возвращает коллекцию, элементы которой соответствуют некоторому условию, которое передается в виде функции*/